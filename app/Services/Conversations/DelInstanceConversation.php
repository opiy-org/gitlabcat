<?php
/**
 * Created by PhpStorm.
 * User: opiy
 * Date: 23.01.2018
 * Time: 10:28
 */

namespace App\Services\Conversations;

use App\Helpers\l;
use App\Models\Instance;
use App\Models\Project;

use BotMan\BotMan\Messages\Incoming\Answer;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Outgoing\Question;

class DelInstanceConversation extends AbstractConversation
{

    protected $proj;

    public function run()
    {
        $this->askWhom();
    }

    protected function askWhom()
    {
        $buttons = [];
        $projects = Project::get();
        if (!count($projects)) {
            $this->say('–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç.');
            return;
        }

        foreach ($projects as $project) {
            $buttons[] = Button::create('üí° ' . $project->name)->value($project->id);
        }

        $question = Question::create('–ò–∑ –∫–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å?')
            ->fallback('–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å')
            ->callbackId('selectWhomProject')
            ->addButtons($buttons);

        $this->ask($question, function (Answer $answer) {
            if ($answer->isInteractiveMessageReply()) {
                $selectedValue = $answer->getValue();
                $this->askInstanceName((int)$selectedValue);
            }
        });
    }

    /**
     * Select instance
     *
     * @param int|null $project_id
     */
    protected function askInstanceName(int $project_id = null)
    {
        if ($project_id) {
            $this->proj = Project::where('id', $project_id)->first();
        }
        if (!$this->proj) {
            $this->say('–ü—Ä–æ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°—Ç—Ä–∞–Ω–Ω–æ...');
            return;
        }

        $buttons = [];
        $instances = Instance::where('project_id', $this->proj->id)->get();
        if (!count($instances)) {
            $this->say('–£ –ø—Ä–æ–µ–∫—Ç–∞ ' . $this->proj->name . ' –µ—â–µ –Ω–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤!');
            return;
        }

        foreach ($instances as $instance) {
            $buttons[] = Button::create('üñ•Ô∏è  ' . $instance->name)->value($instance->id);
        }


        $question = Question::create('–ö–∞–∫–æ–π –∏–Ω—Å—Ç–∞–Ω—Å —É–¥–∞–ª—è–µ–º ?')
            ->fallback('–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å')
            ->callbackId('shouldDelInstances')
            ->addButtons($buttons);

        $this->ask($question, function (Answer $answer) {
            if ($answer->isInteractiveMessageReply()) {
                $selectedValue = $answer->getValue();
                $this->doFinish($selectedValue);
            }
        });
    }


    /**
     *  Del instance
     *
     * @param string $instanceId
     * @throws \Exception
     */
    protected function doFinish(string $instanceId)
    {
        $instance = Instance::where('project_id', $this->proj->id)
            ->where('id', (int)$instanceId)->first();
        if (!$instance) {
            $this->say('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ. –°—Ç—Ä–∞–Ω–Ω–æ...');
            return;
        }
        try {
            $del = $instance->delete();
        } catch (\Exception $exception) {
            l::exc($this, $exception);
        }

        if ($del) {
            $this->say('–£–¥–æ–ª–∏–ª!!111');

        } else {
            $this->say('–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å');
        }
    }

}